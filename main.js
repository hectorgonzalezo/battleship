(self.webpackChunkBattleship=self.webpackChunkBattleship||[]).push([[179],{472:(n,e,t)=>{"use strict";var r=t(798),o=t.n(r);const a=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:9;return Math.floor(Math.random()*(n+1))};var i=function(n){var e=new Array(n).fill(1);return{isSunk:function(){return e.every((function(n){return 0===n}))},getLength:function(){return n},getHit:function(t){return t>=n||t<0||(e[t]=0),e},getSquares:function(){return e}}},s=function(n){var e=Array(10).fill().map((function(){return[{},{},{},{},{},{},{},{},{},{}]}));function t(){return e.every((function(n){return n.every((function(n){return void 0===n.ship||n.ship.isSunk()}))}))}function r(n,t,r,o){var a,i;"horizontal"===o?(a=function(n,t,r){var o=[];return[-1,0,1].forEach((function(a){if(n+a>=0&&n+a<=9){var i=e[n+a].slice(Math.max(0,t-1),Math.min(10,t+r+1));o.push(i)}})),o.flat()}(t,r,n),i=e[t].slice(r,r+n)):(a=e.filter((function(e,r){return r>=Math.max(0,t-1)&&r<Math.min(10,t+n+1)})),i=e.filter((function(e,r){return r>=t&&r<t+n})),a=a.map((function(n){return n.filter((function(n,e){return e>=Math.max(0,r-1)||e<=Math.min(9,r+1)}))})),i=i.map((function(n){return n.filter((function(n,e){return e===r}))})),a=a.flat(),i=i.flat());var s=a.some((function(n){return n.hasOwnProperty("ship")})),A=i.length!==n;return s||A}function o(n,t,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"horizontal",i=n.getLength();if(!r(i,t,o,a)){if("horizontal"===a)for(var s=0;s<i;s++){var A=e[t][s+o];A.ship=n,A.shipSquare=s}else if("vertical"===a)for(var c=0;c<i;c++){var l=e[t+c][o];l.ship=n,l.shipSquare=c,l.direction=a}return n}}return{getCurrentBoard:function(){return e},getDiv:function(){return n},placeShip:o,receiveAttack:function(n,r){if(!t()){var o=e[n][r];return i=!0===(a=o).hit,s=void 0!==a.ship&&0===a.ship.getSquares()[a.shipSquare],i||s?"Cant hit the same spot twice":(o.hasOwnProperty("ship")?o.ship.getHit(o.shipSquare):o.hit=!0,t()?"Ships were just sunk":o)}var a,i,s;return"Ships already sunk"},areAllShipsSunk:t,placeRandomShips:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,e=[];e.length!==n;){var t=a(4)+1,r=a(9),s=a(9),A=["horizontal","vertical"][a(1)],c=o(i(t),r,s,A);void 0!==c&&e.push(c)}return e}}},A=document.querySelector("#player1-board"),c=document.querySelector("#player2-board"),l=s(A),u=s(c);function p(n){var e=n.getDiv();n.getCurrentBoard().forEach((function(n,t){var r=document.createElement("div");r.classList.add("row"),r.setAttribute("data",t),e.append(r),n.forEach((function(n,e){var t=document.createElement("div");t.classList.add("square"),t.setAttribute("data",e),r.append(t)}))}))}function d(n){var e=n.getDiv();n.getCurrentBoard().forEach((function(n,t){n.forEach((function(n,r){void 0!==n.ship&&e.children[t].children[r].classList.add("ship-square")}))}))}o().subscribe("window-loaded",(function(){p(l),p(u)})),o().subscribe("window-loaded",(function(){l.placeRandomShips(6),u.placeRandomShips(6),d(l),d(u)}));var f=document.querySelectorAll("#ships .ship"),g=document.querySelector("#pop-up .board");f.forEach((function(n){n.addEventListener("dragstart",(function(n){n.currentTarget.classList.add("dragging"),n.dataTransfer.clearData(),n.dataTransfer.setData("text/plain",n.target.id)})),n.addEventListener("dragend",(function(n){n.currentTarget.classList.remove("dragging")}))})),Array.from(g.children).forEach((function(n){Array.from(n.children).forEach((function(n){n.addEventListener("drop",(function(n){n.preventDefault();var e=n.dataTransfer.getData("text/plain"),t=document.getElementById(e);t.getAttribute("data"),t.remove()})),n.addEventListener("dragover",(function(n){return n.preventDefault()}))}))})),window.addEventListener("load",(function(n){o().publish("window-loaded")}));var h=t(379),b=t.n(h),C=t(795),m=t.n(C),E=t(569),v=t.n(E),y=t(565),B=t.n(y),w=t(216),k=t.n(w),x=t(589),S=t.n(x),q=t(426),j={};j.styleTagTransform=S(),j.setAttributes=B(),j.insert=v().bind(null,"head"),j.domAPI=m(),j.insertStyleElement=k(),b()(q.Z,j),q.Z&&q.Z.locals&&q.Z.locals},917:(n,e,t)=>{"use strict";t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,'/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n:root {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n',"",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;AACD;EACE,sBAAsB;AACxB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE,SAAS;EACT,UAAU;EACV,SAAS;EACT,eAAe;EACf,aAAa;EACb,wBAAwB;AAC1B;AACA,gDAAgD;AAChD;;;;;;;;;;;EAWE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,YAAY;AACd;AACA;;;;EAIE,WAAW;EACX,aAAa;AACf;AACA;EACE,yBAAyB;EACzB,iBAAiB;AACnB",sourcesContent:['/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n:root {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n'],sourceRoot:""}]);const s=i},426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),s=t(917),A=i()(o());A.i(s.Z),A.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap);"]),A.push([n.id,':root {\n  --board-gap: 2px;\n  --board-size: calc(430px + calc(var(--board-gap) * 10));\n  --color-water: rgb(135, 217, 214);\n  --color-water-dark: rgb(56, 127, 125);\n  --color-background: #27272a;\n  --color-light: #f4f4f5;\n  --color-medium-light: #a1a1aa;\n  --color-medium-dark: #52525b;\n  --color-dark: #3f3f46;\n  --color-complementary1-light: rgb(162, 242, 144);\n  --color-complementary1-dark: rgb(14, 60, 13);\n  --color-complementary2-light: rgb(245, 176, 118);\n  --color-complementary2-dark: rgb(131, 63, 14);\n  font-family: "Roboto", sans-serif;\n}\n\n/* * {\n    outline: dashed red;\n}  */\n\nbody {\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  color: var(--color-light);\n}\n\n#game {\n  background-color: var(--color-background);\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-rows: 100px 1fr 50px;\n  align-items: center;\n}\n\n.inactive {\n  position: absolute;\n  right: -100%;\n}\n\nheader {\n}\n\nmain {\n  width: 100%;\n  display: grid;\n  grid-template-rows: 50px 1fr;\n  grid-template-columns: repeat(2, 1fr);\n  justify-items: center;\n  gap: auto;\n  align-items: center;\n}\n\nmain > h1 {\n  color: var(--color-light);\n  grid-row: 1 / 2;\n}\n\n.board {\n  width: var(--board-size);\n  height: var(--board-size);\n  background-color: var(--color-background);\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  gap: var(--board-gap);\n}\n\n.row {\n  display: flex;\n  height: auto;\n  gap: var(--board-gap);\n}\n\n.square {\n  background-color: var(--color-water);\n  width: 100%;\n  height: 100%;\n}\n\n.square:hover {\n  background-color: var(--color-water-dark);\n}\n\nfooter {\n  margin-top: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 100%;\n  gap: 2vw;\n  background-color: var(--color-background);\n  color: white;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,\n    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1.5rem;\n}\n\n#github-logo {\n  height: 30px;\n}\n\n#pop-up {\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--color-background);\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: grid;\n  justify-items: center;\n  grid-template-rows: 1fr 50px 8fr;\n  grid-template-columns: 2fr 1fr;\n  grid-template-areas:\n    "title title"\n    "description description"\n    "board ships";\n}\n\n#pop-up.inactive {\n  left: -100%;\n}\n#pop-up article {\n  grid-area: title;\n}\n\n#pop-up h3 {\n  grid-area: description;\n}\n\n#pop-up .board {\n  grid-area: board;\n}\n\n#ships {\n  grid-area: ships;\n}\n\n#pop-up article {\n  background: linear-gradient(\n    to bottom,\n    rgb(135, 135, 236),\n    var(--color-water)\n  );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  text-align: center;\n}\n\n#title {\n  font-size: 3rem;\n  font-weight: bold;\n  letter-spacing: 0.3rem;\n  padding: 20px;\n}\n\n#ships {\n  display: grid;\n  align-items: center;\n  justify-items: start;\n}\n\n#ships .ship {\n  display: flex;\n  gap: var(--board-gap);\n}\n\n.ship.dragging {\n  opacity: 0.5;\n}\n\n#ships > .multiple-ships {\n  display: flex;\n  gap: 50px;\n}\n.ship-square {\n  background-color: blue;\n}\n\n@media only screen and (max-width: 950px) {\n  main {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-evenly;\n    gap: 30px;\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAIA;EACE,gBAAgB;EAChB,uDAAuD;EACvD,iCAAiC;EACjC,qCAAqC;EACrC,2BAA2B;EAC3B,sBAAsB;EACtB,6BAA6B;EAC7B,4BAA4B;EAC5B,qBAAqB;EACrB,gDAAgD;EAChD,4CAA4C;EAC5C,gDAAgD;EAChD,6CAA6C;EAC7C,iCAAiC;AACnC;;AAEA;;IAEI;;AAEJ;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,yCAAyC;EACzC,aAAa;EACb,YAAY;EACZ,aAAa;EACb,kCAAkC;EAClC,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;AACA;;AAEA;EACE,WAAW;EACX,aAAa;EACb,4BAA4B;EAC5B,qCAAqC;EACrC,qBAAqB;EACrB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,wBAAwB;EACxB,yBAAyB;EACzB,yCAAyC;EACzC,aAAa;EACb,mCAAmC;EACnC,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,oCAAoC;EACpC,WAAW;EACX,YAAY;AACd;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,WAAW;EACX,QAAQ;EACR,yCAAyC;EACzC,YAAY;EACZ;+EAC6E;EAC7E,iBAAiB;AACnB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,yCAAyC;EACzC,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,aAAa;EACb,qBAAqB;EACrB,gCAAgC;EAChC,8BAA8B;EAC9B;;;iBAGe;AACjB;;AAEA;EACE,WAAW;AACb;AACA;EACE,gBAAgB;AAClB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE;;;;GAIC;EACD,6BAA6B;EAC7B,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,sBAAsB;EACtB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,sBAAsB;AACxB;;AAEA;EACE;IACE,aAAa;IACb,sBAAsB;IACtB,YAAY;IACZ,6BAA6B;IAC7B,SAAS;EACX;AACF",sourcesContent:['@import "./reset.css";\n\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap");\n\n:root {\n  --board-gap: 2px;\n  --board-size: calc(430px + calc(var(--board-gap) * 10));\n  --color-water: rgb(135, 217, 214);\n  --color-water-dark: rgb(56, 127, 125);\n  --color-background: #27272a;\n  --color-light: #f4f4f5;\n  --color-medium-light: #a1a1aa;\n  --color-medium-dark: #52525b;\n  --color-dark: #3f3f46;\n  --color-complementary1-light: rgb(162, 242, 144);\n  --color-complementary1-dark: rgb(14, 60, 13);\n  --color-complementary2-light: rgb(245, 176, 118);\n  --color-complementary2-dark: rgb(131, 63, 14);\n  font-family: "Roboto", sans-serif;\n}\n\n/* * {\n    outline: dashed red;\n}  */\n\nbody {\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  color: var(--color-light);\n}\n\n#game {\n  background-color: var(--color-background);\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-rows: 100px 1fr 50px;\n  align-items: center;\n}\n\n.inactive {\n  position: absolute;\n  right: -100%;\n}\n\nheader {\n}\n\nmain {\n  width: 100%;\n  display: grid;\n  grid-template-rows: 50px 1fr;\n  grid-template-columns: repeat(2, 1fr);\n  justify-items: center;\n  gap: auto;\n  align-items: center;\n}\n\nmain > h1 {\n  color: var(--color-light);\n  grid-row: 1 / 2;\n}\n\n.board {\n  width: var(--board-size);\n  height: var(--board-size);\n  background-color: var(--color-background);\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  gap: var(--board-gap);\n}\n\n.row {\n  display: flex;\n  height: auto;\n  gap: var(--board-gap);\n}\n\n.square {\n  background-color: var(--color-water);\n  width: 100%;\n  height: 100%;\n}\n\n.square:hover {\n  background-color: var(--color-water-dark);\n}\n\nfooter {\n  margin-top: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 100%;\n  gap: 2vw;\n  background-color: var(--color-background);\n  color: white;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,\n    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1.5rem;\n}\n\n#github-logo {\n  height: 30px;\n}\n\n#pop-up {\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--color-background);\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  display: grid;\n  justify-items: center;\n  grid-template-rows: 1fr 50px 8fr;\n  grid-template-columns: 2fr 1fr;\n  grid-template-areas:\n    "title title"\n    "description description"\n    "board ships";\n}\n\n#pop-up.inactive {\n  left: -100%;\n}\n#pop-up article {\n  grid-area: title;\n}\n\n#pop-up h3 {\n  grid-area: description;\n}\n\n#pop-up .board {\n  grid-area: board;\n}\n\n#ships {\n  grid-area: ships;\n}\n\n#pop-up article {\n  background: linear-gradient(\n    to bottom,\n    rgb(135, 135, 236),\n    var(--color-water)\n  );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  text-align: center;\n}\n\n#title {\n  font-size: 3rem;\n  font-weight: bold;\n  letter-spacing: 0.3rem;\n  padding: 20px;\n}\n\n#ships {\n  display: grid;\n  align-items: center;\n  justify-items: start;\n}\n\n#ships .ship {\n  display: flex;\n  gap: var(--board-gap);\n}\n\n.ship.dragging {\n  opacity: 0.5;\n}\n\n#ships > .multiple-ships {\n  display: flex;\n  gap: 50px;\n}\n.ship-square {\n  background-color: blue;\n}\n\n@media only screen and (max-width: 950px) {\n  main {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-evenly;\n    gap: 30px;\n  }\n}\n'],sourceRoot:""}]);const c=A},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},798:function(n,e,t){n=t.nmd(n),function(t,r){"use strict";var o={};t.PubSub?(o=t.PubSub,console.warn("PubSub already loaded, using existing version")):(t.PubSub=o,function(n){var e={},t=-1;function r(n,e,t){try{n(e,t)}catch(n){setTimeout(function(n){return function(){throw n}}(n),0)}}function o(n,e,t){n(e,t)}function a(n,t,a,i){var s,A=e[t],c=i?o:r;if(Object.prototype.hasOwnProperty.call(e,t))for(s in A)Object.prototype.hasOwnProperty.call(A,s)&&c(A[s],n,a)}function i(n){var t=String(n);return Boolean(Object.prototype.hasOwnProperty.call(e,t)&&function(n){var e;for(e in n)if(Object.prototype.hasOwnProperty.call(n,e))return!0;return!1}(e[t]))}function s(n,e,t,r){var o=function(n,e,t){return function(){var r=String(n),o=r.lastIndexOf(".");for(a(n,n,e,t);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),a(n,r,e,t);a(n,"*",e,t)}}(n="symbol"==typeof n?n.toString():n,e,r);return!!function(n){for(var e=String(n),t=i(e)||i("*"),r=e.lastIndexOf(".");!t&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),t=i(e);return t}(n)&&(!0===t?o():setTimeout(o,0),!0)}n.publish=function(e,t){return s(e,t,!1,n.immediateExceptions)},n.publishSync=function(e,t){return s(e,t,!0,n.immediateExceptions)},n.subscribe=function(n,r){if("function"!=typeof r)return!1;n="symbol"==typeof n?n.toString():n,Object.prototype.hasOwnProperty.call(e,n)||(e[n]={});var o="uid_"+String(++t);return e[n][o]=r,o},n.subscribeAll=function(e){return n.subscribe("*",e)},n.subscribeOnce=function(e,t){var r=n.subscribe(e,(function(){n.unsubscribe(r),t.apply(this,arguments)}));return n},n.clearAllSubscriptions=function(){e={}},n.clearSubscriptions=function(n){var t;for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n)&&delete e[t]},n.countSubscriptions=function(n){var t,r,o=0;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n)){for(r in e[t])o++;break}return o},n.getSubscriptions=function(n){var t,r=[];for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n)&&r.push(t);return r},n.unsubscribe=function(t){var r,o,a,i="string"==typeof t&&(Object.prototype.hasOwnProperty.call(e,t)||function(n){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&0===t.indexOf(n))return!0;return!1}(t)),s=!i&&"string"==typeof t,A="function"==typeof t,c=!1;if(!i){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],s&&o[t]){delete o[t],c=t;break}if(A)for(a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===t&&(delete o[a],c=!0)}return c}n.clearSubscriptions(t)}}(o)),void 0!==n&&n.exports&&(e=n.exports=o),e.PubSub=o,n.exports=e=o}("object"==typeof window&&window||this)},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var A=n[s],c=r.base?A[0]+r.base:A[0],l=a[c]||0,u="".concat(c," ").concat(l);a[c]=l+1;var p=t(u),d={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)e[p].references++,e[p].updater(d);else{var f=o(d,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var A=r(n,o),c=0;c<a.length;c++){var l=t(a[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=A}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=472)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,