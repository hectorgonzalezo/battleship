/*! For license information please see main.js.LICENSE.txt */
(self.webpackChunkBattleship=self.webpackChunkBattleship||[]).push([[179],{97:(n,t,e)=>{"use strict";var r=e(798),o=e.n(r),i={};!function n(t,e,r,o){var i=!!(t.Worker&&t.Blob&&t.Promise&&t.OffscreenCanvas&&t.OffscreenCanvasRenderingContext2D&&t.HTMLCanvasElement&&t.HTMLCanvasElement.prototype.transferControlToOffscreen&&t.URL&&t.URL.createObjectURL);function a(){}function s(n){var r=e.exports.Promise,o=void 0!==r?r:t.Promise;return"function"==typeof o?new o(n):(n(a,a),null)}var c,l,u,A,d,p,h,f,g,m=(u=Math.floor(1e3/60),A={},d=0,"function"==typeof requestAnimationFrame&&"function"==typeof cancelAnimationFrame?(c=function(n){var t=Math.random();return A[t]=requestAnimationFrame((function e(r){d===r||d+u-1<r?(d=r,delete A[t],n()):A[t]=requestAnimationFrame(e)})),t},l=function(n){A[n]&&cancelAnimationFrame(A[n])}):(c=function(n){return setTimeout(n,u)},l=function(n){return clearTimeout(n)}),{frame:c,cancel:l}),y=(f={},function(){if(p)return p;if(!r&&i){var t=["var CONFETTI, SIZE = {}, module = {};","("+n.toString()+")(this, module, true, SIZE);","onmessage = function(msg) {","  if (msg.data.options) {","    CONFETTI(msg.data.options).then(function () {","      if (msg.data.callback) {","        postMessage({ callback: msg.data.callback });","      }","    });","  } else if (msg.data.reset) {","    CONFETTI.reset();","  } else if (msg.data.resize) {","    SIZE.width = msg.data.resize.width;","    SIZE.height = msg.data.resize.height;","  } else if (msg.data.canvas) {","    SIZE.width = msg.data.canvas.width;","    SIZE.height = msg.data.canvas.height;","    CONFETTI = module.exports.create(msg.data.canvas);","  }","}"].join("\n");try{p=new Worker(URL.createObjectURL(new Blob([t])))}catch(n){return void 0!==typeof console&&"function"==typeof console.warn&&console.warn("ðŸŽŠ Could not load worker",n),null}!function(n){function t(t,e){n.postMessage({options:t||{},callback:e})}n.init=function(t){var e=t.transferControlToOffscreen();n.postMessage({canvas:e},[e])},n.fire=function(e,r,o){if(h)return t(e,null),h;var i=Math.random().toString(36).slice(2);return h=s((function(r){function a(t){t.data.callback===i&&(delete f[i],n.removeEventListener("message",a),h=null,o(),r())}n.addEventListener("message",a),t(e,i),f[i]=a.bind(null,{data:{callback:i}})}))},n.reset=function(){for(var t in n.postMessage({reset:!0}),f)f[t](),delete f[t]}}(p)}return p}),v={particleCount:50,angle:90,spread:45,startVelocity:45,decay:.9,gravity:1,drift:0,ticks:200,x:.5,y:.5,shapes:["square","circle"],zIndex:100,colors:["#26ccff","#a25afd","#ff5e7e","#88ff5a","#fcff42","#ffa62d","#ff36ff"],disableForReducedMotion:!1,scalar:1};function b(n,t,e){return function(n,t){return t?t(n):n}(n&&null!=n[t]?n[t]:v[t],e)}function E(n){return n<0?0:Math.floor(n)}function C(n){return parseInt(n,16)}function B(n){return n.map(w)}function w(n){var t=String(n).replace(/[^0-9a-f]/gi,"");return t.length<6&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]),{r:C(t.substring(0,2)),g:C(t.substring(2,4)),b:C(t.substring(4,6))}}function x(n){n.width=document.documentElement.clientWidth,n.height=document.documentElement.clientHeight}function k(n){var t=n.getBoundingClientRect();n.width=t.width,n.height=t.height}function S(n,e){var a,c=!n,l=!!b(e||{},"resize"),u=b(e,"disableForReducedMotion",Boolean),A=i&&b(e||{},"useWorker")?y():null,d=c?x:k,p=!(!n||!A||!n.__confetti_initialized),h="function"==typeof matchMedia&&matchMedia("(prefers-reduced-motion)").matches;function f(t,e,i){for(var c,l,u,A,p=b(t,"particleCount",E),h=b(t,"angle",Number),f=b(t,"spread",Number),g=b(t,"startVelocity",Number),y=b(t,"decay",Number),v=b(t,"gravity",Number),C=b(t,"drift",Number),w=b(t,"colors",B),x=b(t,"ticks",Number),k=b(t,"shapes"),S=b(t,"scalar"),q=function(n){var t=b(n,"origin",Object);return t.x=b(t,"x",Number),t.y=b(t,"y",Number),t}(t),L=p,j=[],I=n.width*q.x,O=n.height*q.y;L--;)j.push((void 0,void 0,l=(c={x:I,y:O,angle:h,spread:f,startVelocity:g,color:w[L%w.length],shape:k[(0,A=k.length,Math.floor(Math.random()*(A-0))+0)],ticks:x,decay:y,gravity:v,drift:C,scalar:S}).angle*(Math.PI/180),u=c.spread*(Math.PI/180),{x:c.x,y:c.y,wobble:10*Math.random(),wobbleSpeed:Math.min(.11,.1*Math.random()+.05),velocity:.5*c.startVelocity+Math.random()*c.startVelocity,angle2D:-l+(.5*u-Math.random()*u),tiltAngle:(.5*Math.random()+.25)*Math.PI,color:c.color,shape:c.shape,tick:0,totalTicks:c.ticks,decay:c.decay,drift:c.drift,random:Math.random()+2,tiltSin:0,tiltCos:0,wobbleX:0,wobbleY:0,gravity:3*c.gravity,ovalScalar:.6,scalar:c.scalar}));return a?a.addFettis(j):(a=function(n,t,e,i,a){var c,l,u=t.slice(),A=n.getContext("2d"),d=s((function(t){function s(){c=l=null,A.clearRect(0,0,i.width,i.height),a(),t()}c=m.frame((function t(){!r||i.width===o.width&&i.height===o.height||(i.width=n.width=o.width,i.height=n.height=o.height),i.width||i.height||(e(n),i.width=n.width,i.height=n.height),A.clearRect(0,0,i.width,i.height),u=u.filter((function(n){return function(n,t){t.x+=Math.cos(t.angle2D)*t.velocity+t.drift,t.y+=Math.sin(t.angle2D)*t.velocity+t.gravity,t.wobble+=t.wobbleSpeed,t.velocity*=t.decay,t.tiltAngle+=.1,t.tiltSin=Math.sin(t.tiltAngle),t.tiltCos=Math.cos(t.tiltAngle),t.random=Math.random()+2,t.wobbleX=t.x+10*t.scalar*Math.cos(t.wobble),t.wobbleY=t.y+10*t.scalar*Math.sin(t.wobble);var e=t.tick++/t.totalTicks,r=t.x+t.random*t.tiltCos,o=t.y+t.random*t.tiltSin,i=t.wobbleX+t.random*t.tiltCos,a=t.wobbleY+t.random*t.tiltSin;return n.fillStyle="rgba("+t.color.r+", "+t.color.g+", "+t.color.b+", "+(1-e)+")",n.beginPath(),"circle"===t.shape?n.ellipse?n.ellipse(t.x,t.y,Math.abs(i-r)*t.ovalScalar,Math.abs(a-o)*t.ovalScalar,Math.PI/10*t.wobble,0,2*Math.PI):function(n,t,e,r,o,i,a,s,c){n.save(),n.translate(t,e),n.rotate(i),n.scale(r,o),n.arc(0,0,1,0,s,void 0),n.restore()}(n,t.x,t.y,Math.abs(i-r)*t.ovalScalar,Math.abs(a-o)*t.ovalScalar,Math.PI/10*t.wobble,0,2*Math.PI):(n.moveTo(Math.floor(t.x),Math.floor(t.y)),n.lineTo(Math.floor(t.wobbleX),Math.floor(o)),n.lineTo(Math.floor(i),Math.floor(a)),n.lineTo(Math.floor(r),Math.floor(t.wobbleY))),n.closePath(),n.fill(),t.tick<t.totalTicks}(A,n)})),u.length?c=m.frame(t):s()})),l=s}));return{addFettis:function(n){return u=u.concat(n),d},canvas:n,promise:d,reset:function(){c&&m.cancel(c),l&&l()}}}(n,j,d,e,i)).promise}function g(e){var r=u||b(e,"disableForReducedMotion",Boolean),o=b(e,"zIndex",Number);if(r&&h)return s((function(n){n()}));c&&a?n=a.canvas:c&&!n&&(n=function(n){var t=document.createElement("canvas");return t.style.position="fixed",t.style.top="0px",t.style.left="0px",t.style.pointerEvents="none",t.style.zIndex=n,t}(o),document.body.appendChild(n)),l&&!p&&d(n);var i={width:n.width,height:n.height};function g(){if(A){var t={getBoundingClientRect:function(){if(!c)return n.getBoundingClientRect()}};return d(t),void A.postMessage({resize:{width:t.width,height:t.height}})}i.width=i.height=null}function m(){a=null,l&&t.removeEventListener("resize",g),c&&n&&(document.body.removeChild(n),n=null,p=!1)}return A&&!p&&A.init(n),p=!0,A&&(n.__confetti_initialized=!0),l&&t.addEventListener("resize",g,!1),A?A.fire(e,i,m):f(e,i,m)}return g.reset=function(){A&&A.reset(),a&&a.reset()},g}function q(){return g||(g=S(null,{useWorker:!0,resize:!0})),g}e.exports=function(){return q().apply(this,arguments)},e.exports.reset=function(){q().reset()},e.exports.create=S}(function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:this||{}}(),i,!1);const a=i.exports;function s(n){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},s(n)}function c(){c=function(){return n};var n={},t=Object.prototype,e=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function l(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{l({},"")}catch(n){l=function(n,t,e){return n[t]=e}}function u(n,t,e,r){var o=t&&t.prototype instanceof p?t:p,i=Object.create(o.prototype),a=new x(r||[]);return i._invoke=function(n,t,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var s=C(a,e);if(s){if(s===d)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var c=A(n,t,e);if("normal"===c.type){if(r=e.done?"completed":"suspendedYield",c.arg===d)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r="completed",e.method="throw",e.arg=c.arg)}}}(n,e,a),i}function A(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=u;var d={};function p(){}function h(){}function f(){}var g={};l(g,o,(function(){return this}));var m=Object.getPrototypeOf,y=m&&m(m(k([])));y&&y!==t&&e.call(y,o)&&(g=y);var v=f.prototype=p.prototype=Object.create(g);function b(n){["next","throw","return"].forEach((function(t){l(n,t,(function(n){return this._invoke(t,n)}))}))}function E(n,t){function r(o,i,a,c){var l=A(n[o],n,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==s(d)&&e.call(d,"__await")?t.resolve(d.__await).then((function(n){r("next",n,a,c)}),(function(n){r("throw",n,a,c)})):t.resolve(d).then((function(n){u.value=n,a(u)}),(function(n){return r("throw",n,a,c)}))}c(l.arg)}var o;this._invoke=function(n,e){function i(){return new t((function(t,o){r(n,e,t,o)}))}return o=o?o.then(i,i):i()}}function C(n,t){var e=n.iterator[t.method];if(void 0===e){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=void 0,C(n,t),"throw"===t.method))return d;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var r=A(e,n.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,d;var o=r.arg;return o?o.done?(t[n.resultName]=o.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,d):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,d)}function B(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function w(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function x(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(B,this),this.reset(!0)}function k(n){if(n){var t=n[o];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function t(){for(;++r<n.length;)if(e.call(n,r))return t.value=n[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:S}}function S(){return{value:void 0,done:!0}}return h.prototype=f,l(v,"constructor",f),l(f,"constructor",h),h.displayName=l(f,a,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,f):(n.__proto__=f,l(n,a,"GeneratorFunction")),n.prototype=Object.create(v),n},n.awrap=function(n){return{__await:n}},b(E.prototype),l(E.prototype,i,(function(){return this})),n.AsyncIterator=E,n.async=function(t,e,r,o,i){void 0===i&&(i=Promise);var a=new E(u(t,e,r,o),i);return n.isGeneratorFunction(e)?a:a.next().then((function(n){return n.done?n.value:a.next()}))},b(v),l(v,a,"Generator"),l(v,o,(function(){return this})),l(v,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=k,x.prototype={constructor:x,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var t in this)"t"===t.charAt(0)&&e.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function r(e,r){return a.type="throw",a.arg=n,t.next=e,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),d},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),w(e),d}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var o=r.arg;w(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,e){return this.delegate={iterator:k(n),resultName:t,nextLoc:e},"next"===this.method&&(this.arg=void 0),d}},n}function l(n,t,e,r,o,i,a){try{var s=n[i](a),c=s.value}catch(n){return void e(n)}s.done?t(c):Promise.resolve(c).then(r,o)}function u(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var i=n.apply(t,e);function a(n){l(i,r,o,a,s,"next",n)}function s(n){l(i,r,o,a,s,"throw",n)}a(void 0)}))}}i.exports.create;var A=document.querySelector("#player1-board"),d=document.querySelector("#player2-board"),p=document.querySelector("#choose-board"),h=document.querySelector("header h1");function f(n){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e=Array(10).fill().map((function(){return[{},{},{},{},{},{},{},{},{},{}]}));e.forEach((function(e,r){var o=document.createElement("div");o.classList.add("row"),o.setAttribute("data",r),n.append(o),e.forEach((function(n,e){var r=document.createElement("div");r.classList.add("square"),t&&r.classList.add("enemy"),r.setAttribute("data",e),o.append(r)}))}))}function g(n){return m.apply(this,arguments)}function m(){return(m=u(c().mark((function n(t){var e,r;return c().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:e=t.getCurrentBoard(),r=t.getDiv(),e.forEach((function(n,t){n.forEach((function(n,e){void 0!==n.ship&&r.children[t].children[e].classList.add("ship-square")}))}));case 3:case"end":return n.stop()}}),n)})))).apply(this,arguments)}function y(){var n=document.querySelector(".hit.just-hit");null!==n&&n.classList.remove("just-hit")}function v(){return v=u(c().mark((function n(t){return c().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return f(A),f(d,!0),f(p),n.next=5,g(t);case 5:o().publish("enemy-loaded");case 6:case"end":return n.stop()}}),n)}))),v.apply(this,arguments)}o().subscribe("game-started",(function(n,t){g(t)}));const b={startBoards:function(n){return v.apply(this,arguments)},renderShips:g,updateBoardAt:function(n,t,e){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=n.getDiv(),i=o.children[t].children[e];i.classList.add("hit"),y(),r||i.classList.add("just-hit")},updateDisplay:function(n){h.classList.remove("typing"),h.offsetWidth,h.innerText=n,h.classList.add("typing")},updateLoose:function(){h.classList.add("loose")},updateWin:function(){h.classList.add("win"),a()}},E=function(n){var t=!0===n.hit,e=void 0!==n.ship&&0===n.ship.getSquares()[n.shipSquare];return t||e},C=function(n){var t=n[0]<0||n[0]>9,e=n[1]<0||n[1]>9;return t||e},B=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:9;return Math.floor(Math.random()*(n+1))};function w(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,o,i=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw o}}return i}}(n,t)||function(n,t){if(n){if("string"==typeof n)return x(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?x(n,t):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function k(n,t){return{playTurn:function(t,e){return n.receiveAttack(Number(t),Number(e))},getNumber:function(){return t}}}const S=function(n){var t=new Array(n).fill(1);return{isSunk:function(){return t.every((function(n){return 0===n}))},getLength:function(){return n},getHit:function(e){return e>=n||e<0||(t[e]=0),t},getSquares:function(){return t}}};function q(n){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},q(n)}function L(){L=function(){return n};var n={},t=Object.prototype,e=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function s(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{s({},"")}catch(n){s=function(n,t,e){return n[t]=e}}function c(n,t,e,r){var o=t&&t.prototype instanceof A?t:A,i=Object.create(o.prototype),a=new B(r||[]);return i._invoke=function(n,t,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var s=b(a,e);if(s){if(s===u)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var c=l(n,t,e);if("normal"===c.type){if(r=e.done?"completed":"suspendedYield",c.arg===u)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r="completed",e.method="throw",e.arg=c.arg)}}}(n,e,a),i}function l(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=c;var u={};function A(){}function d(){}function p(){}var h={};s(h,o,(function(){return this}));var f=Object.getPrototypeOf,g=f&&f(f(w([])));g&&g!==t&&e.call(g,o)&&(h=g);var m=p.prototype=A.prototype=Object.create(h);function y(n){["next","throw","return"].forEach((function(t){s(n,t,(function(n){return this._invoke(t,n)}))}))}function v(n,t){function r(o,i,a,s){var c=l(n[o],n,i);if("throw"!==c.type){var u=c.arg,A=u.value;return A&&"object"==q(A)&&e.call(A,"__await")?t.resolve(A.__await).then((function(n){r("next",n,a,s)}),(function(n){r("throw",n,a,s)})):t.resolve(A).then((function(n){u.value=n,a(u)}),(function(n){return r("throw",n,a,s)}))}s(c.arg)}var o;this._invoke=function(n,e){function i(){return new t((function(t,o){r(n,e,t,o)}))}return o=o?o.then(i,i):i()}}function b(n,t){var e=n.iterator[t.method];if(void 0===e){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=void 0,b(n,t),"throw"===t.method))return u;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=l(e,n.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,u;var o=r.arg;return o?o.done?(t[n.resultName]=o.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,u):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,u)}function E(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function C(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function B(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(E,this),this.reset(!0)}function w(n){if(n){var t=n[o];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function t(){for(;++r<n.length;)if(e.call(n,r))return t.value=n[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:x}}function x(){return{value:void 0,done:!0}}return d.prototype=p,s(m,"constructor",p),s(p,"constructor",d),d.displayName=s(p,a,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,p):(n.__proto__=p,s(n,a,"GeneratorFunction")),n.prototype=Object.create(m),n},n.awrap=function(n){return{__await:n}},y(v.prototype),s(v.prototype,i,(function(){return this})),n.AsyncIterator=v,n.async=function(t,e,r,o,i){void 0===i&&(i=Promise);var a=new v(c(t,e,r,o),i);return n.isGeneratorFunction(e)?a:a.next().then((function(n){return n.done?n.value:a.next()}))},y(m),s(m,a,"Generator"),s(m,o,(function(){return this})),s(m,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var r=t.pop();if(r in n)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=w,B.prototype={constructor:B,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!n)for(var t in this)"t"===t.charAt(0)&&e.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function r(e,r){return a.type="throw",a.arg=n,t.next=e,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=n,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),u},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),C(e),u}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var o=r.arg;C(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,e){return this.delegate={iterator:w(n),resultName:t,nextLoc:e},"next"===this.method&&(this.arg=void 0),u}},n}function j(n,t,e,r,o,i,a){try{var s=n[i](a),c=s.value}catch(n){return void e(n)}s.done?t(c):Promise.resolve(c).then(r,o)}function I(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var i=n.apply(t,e);function a(n){j(i,r,o,a,s,"next",n)}function s(n){j(i,r,o,a,s,"throw",n)}a(void 0)}))}}function O(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,o,i=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw o}}return i}}(n,t)||function(n,t){if(n){if("string"==typeof n)return z(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?z(n,t):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function z(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}const M=function(n){var t=document.querySelector("#player".concat(n,"-board")),e=Array(10).fill().map((function(){return[{},{},{},{},{},{},{},{},{},{}]}));function r(){return e.every((function(n){return n.every((function(n){return void 0===n.ship||n.ship.isSunk()}))}))}function i(n,t,r){var o=[];[-1,0,1].forEach((function(i){if(n+i>=0&&n+i<=9){var a=e[n+i].slice(Math.max(0,t-1),Math.min(10,t+r+1));o.push(a)}}));var i=e[n].slice(t,t+r);return[o.flat(),i]}function a(n,t,r){var o,i;return o=e.filter((function(t,e){return e>=Math.max(0,n-1)&&e<Math.min(10,n+r+1)})),i=e.filter((function(t,e){return e>=n&&e<n+r})),o=o.map((function(n){return n.filter((function(n,e){return e>=Math.max(0,t-1)&&e<=Math.min(9,t+1)}))})),i=i.map((function(n){return n.filter((function(n,e){return e===t}))})),[o=o.flat(),i=i.flat()]}function s(n,t,e,r){var o,s;if("horizontal"===r){var c=O(i(t,e,n),2);o=c[0],s=c[1]}else{var l=O(a(t,e,n),2);o=l[0],s=l[1]}var u=o.some((function(n){return n.hasOwnProperty("ship")})),A=s.length!==n;return u||A}function c(n,t,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"horizontal",i=n.getLength();if(!s(i,t,r,o)){if("horizontal"===o){for(var a=0;a<i;a++){var c=e[t][a+r];c.ship=n,c.shipSquare=a,c.direction=o}return n}for(var l=0;l<i;l++){var u=e[t+l][r];u.ship=n,u.shipSquare=l,u.direction=o}return n}}function l(){return(l=I(L().mark((function n(){var t,e,r,o,i,a,s,l;return L().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:for(e=(t=[5,4,3,2,2,1,1,1]).length,r=[];r.length!==e;)o=t[0],i=B(9),a=B(9),s=["horizontal","vertical"][B(1)],void 0!==(l=c(S(o),i,a,s))&&(r.push(l),t.shift());return n.abrupt("return",Promise.resolve(r));case 5:case"end":return n.stop()}}),n)})))).apply(this,arguments)}return{getCurrentBoard:function(){return e},getDiv:function(){return t},placeShip:c,receiveAttack:function(n,t){if(!r()){var s=e[n][t];return E(s)?"Cant hit the same spot twice":(s.hasOwnProperty("ship")?(s.ship.getHit(s.shipSquare),function(n,t,e){if(n.ship.isSunk()){var r=function(n,t,e){var r=n.shipSquare;return"horizontal"===n.direction?[t,e-r]:[t-r,e]}(n,t,e),s=n.ship.getLength();("horizontal"===n.direction?O(i(r[0],r[1],s),1)[0]:O(a(r[0],r[1],s),1)[0]).filter((function(n){return void 0===n.ship})).forEach((function(n){return n.hit=!0})),o().publish("surrounding-squares-sunk")}}(s,n,t)):s.hit=!0,r()?"Ships were just sunk":s)}return"Ships already sunk"},areAllShipsSunk:r,placeRandomShips:function(){return l.apply(this,arguments)}}};var T,P,D=M(1),N=M(2),Y=k(N,1),R=(P=k(T=D,2),Object.assign(P,{playRandom:function(){for(var n=B(),t=B(),e=T.getCurrentBoard()[n][t];E(e);)n=B(),t=B(),e=T.getCurrentBoard()[n][t];return[[n,t],T.receiveAttack(n,t)]},playAround:function n(t){var e,r,o=B(1)*[1,-1][B(1)],i=t[0]+o;e=0===o?B(1)*[1,-1][B(1)]:0;var a,s=t[1]+e;if(C([i,s])||(a=T.getCurrentBoard()[i][s]),C([i,s])||E(a)){var c=w(n(t),2),l=w(c[0],2);i=l[0],s=l[1],r=c[1]}else r=T.receiveAttack(i,s);return[[i,s],r]}}));N.placeRandomShips(),b.startBoards(N);const _={player1:Y,player2:R,player1Board:D,player2Board:N};function F(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,o,i=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw o}}return i}}(n,t)||function(n,t){if(n){if("string"==typeof n)return U(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?U(n,t):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function U(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function Z(n){var t,e,r,o=n.target;t=o.parentElement.getAttribute("data"),e=o.getAttribute("data"),r=_.player1.playTurn(t,e),b.updateBoardAt(_.player2Board,t,e),void 0===r.ship&&(_.player2Board.areAllShipsSunk()?(b.updateDisplay("You won!"),b.updateWin()):_.player1Board.areAllShipsSunk()?(b.updateDisplay("Sorry, you lost!"),b.updateLoose()):W(),document.querySelectorAll(".square.enemy").forEach((function(n){n.removeEventListener("click",Z)})))}function G(){document.querySelectorAll(".square.enemy").forEach((function(n){n.addEventListener("click",Z)})),b.updateDisplay("Your turn")}function W(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:2e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];b.updateDisplay("Opponent's turn"),setTimeout((function(){var r,o;if(Array.isArray(t)&&!e){var i=F(_.player2.playAround(t),2);r=i[0],o=i[1]}else{var a=F(_.player2.playRandom(),2);r=a[0],o=a[1]}b.updateBoardAt(_.player1Board,r[0],r[1]),void 0!==o.ship?W(n+1e3,r,o.ship.isSunk()):_.player1Board.areAllShipsSunk()?(b.updateDisplay("Sorry, you lost!"),b.updateLoose()):G()}),1e3*Math.random()+n)}function H(n){n.getCurrentBoard().forEach((function(t,e){t.forEach((function(t,r){!0===t.hit&&b.updateBoardAt(n,e,r,!0)}))}))}document.querySelector("#restart").addEventListener("click",(function(){document.location.reload(!0)})),o().subscribe("enemy-loaded",G),o().subscribe("surrounding-squares-sunk",(function(){H(_.player1Board),H(_.player2Board)}));var V=e(379),X=e.n(V),Q=e(795),J=e.n(Q),$=e(569),K=e.n($),nn=e(565),tn=e.n(nn),en=e(216),rn=e.n(en),on=e(589),an=e.n(on),sn=e(426),cn={};function ln(n){return ln="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},ln(n)}function un(n,t){if(null==n)return{};var e,r,o=function(n,t){if(null==n)return{};var e,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}function An(n){var t=function(n,t){if("object"!==ln(n)||null===n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var r=e.call(n,t);if("object"!==ln(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n,"string");return"symbol"===ln(t)?t:String(t)}function dn(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function pn(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function hn(n,t,e){return t&&pn(n.prototype,t),e&&pn(n,e),Object.defineProperty(n,"prototype",{writable:!1}),n}function fn(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}cn.styleTagTransform=an(),cn.setAttributes=tn(),cn.insert=K().bind(null,"head"),cn.domAPI=J(),cn.insertStyleElement=rn(),X()(sn.Z,cn),sn.Z&&sn.Z.locals&&sn.Z.locals;var gn=function(){function n(t,e,r){dn(this,n),fn(this,"popupBoard",document.querySelector("#pop-up .board")),this.rowCoord=t,this.columnCoord=e,this.shipLength=r,this.iSquareBefore=Math.max(e-1,0),this.iRowBefore=Math.max(t-1,0),this.rowBefore=Array.from(Array.from(this.popupBoard.children)[this.iRowBefore].children),this.surroundingSquares=[]}return hn(n,[{key:"getHorizontal",value:function(){var n=Math.min(this.columnCoord+this.shipLength,9),t=Math.min(this.rowCoord+1,9),e=Array.from(Array.from(this.popupBoard.children)[this.rowCoord].children),r=Array.from(Array.from(this.popupBoard.children)[t].children);this.surroundingSquares=[e[this.iSquareBefore],e[n]];var o=this.rowBefore.slice(this.iSquareBefore,n+1),i=r.slice(this.iSquareBefore,n+1);return this.surroundingSquares=this.surroundingSquares.concat(o),this.surroundingSquares=this.surroundingSquares.concat(i),this.surroundingSquares}},{key:"getVertical",value:function(){var n=this,t=Math.min(this.columnCoord+1,9),e=Math.min(this.rowCoord+this.shipLength,9);this.rowBefore=this.rowBefore.slice(this.iSquareBefore,t+1);var r=Array.from(Array.from(this.popupBoard.children)[e].children).slice(this.iSquareBefore,t+1),o=Array.from(this.popupBoard.children).slice(this.rowCoord,this.rowCoord+this.shipLength).map((function(e){return Array.from(e.children).slice(n.iSquareBefore,t+1)})).flat();return this.surroundingSquares=this.surroundingSquares.concat(this.rowBefore),this.surroundingSquares=this.surroundingSquares.concat(r),this.surroundingSquares=this.surroundingSquares.concat(o),this.surroundingSquares}}]),n}(),mn=function(){function n(t,e,r,o,i,a){dn(this,n),fn(this,"popupBoard",document.querySelector("#pop-up .board")),this.ship=t,this.rowCoord=e,this.columnCoord=r,this.shipLength=o,this.squaresSurrounding=i,this.squaresBehind=a,this.prospectiveSquares=[]}return hn(n,[{key:"isClashing",value:function(){var n=this.squaresSurrounding,t=this.ship.id,e=(n[t],un(n,[t].map(An))),r=Object.values(e).flat(),o=this.squaresBehind,i=this.ship.id,a=(o[i],un(o,[i].map(An))),s=Object.values(a).flat();return this.prospectiveSquares.some((function(n){return r.includes(n)||s.includes(n)}))}},{key:"horizontal",value:function(){if(this.columnCoord+this.shipLength>10)return!0;var n=Array.from(Array.from(this.popupBoard.children)[this.rowCoord].children);return this.prospectiveSquares=n.slice(this.columnCoord,this.columnCoord+this.shipLength),this.isClashing()}},{key:"vertical",value:function(){var n=this;return this.rowCoord+this.shipLength>10||(Array.from(this.popupBoard.children).slice(this.rowCoord,this.rowCoord+this.shipLength).forEach((function(t){return Array.from(t.children).forEach((function(t){Number(t.getAttribute("data"))===n.columnCoord&&n.prospectiveSquares.push(t)}))})),this.isClashing())}}]),n}();function yn(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,o,i=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw o}}return i}}(n,t)||function(n,t){if(n){if("string"==typeof n)return vn(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?vn(n,t):void 0}}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vn(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}var bn=document.querySelector("#pop-up"),En=document.querySelector("#ships"),Cn=document.querySelectorAll("#pop-up .ship"),Bn=document.querySelector("#pop-up .board"),wn=document.querySelector("#start"),xn={carrier:[],battleship:[],cruiser:[],submarine1:[],submarine2:[],destroyer1:[],destroyer2:[],destroyer3:[]},kn={carrier:[],battleship:[],cruiser:[],submarine1:[],submarine2:[],destroyer1:[],destroyer2:[],destroyer3:[]};function Sn(n){n.target.parentElement.classList.toggle("vertical")}function qn(n,t){return Number(getComputedStyle(n).getPropertyValue(t).match(/\d/g).join(""))}function Ln(n){var t=Number(n.getAttribute("coordrow")),e=Number(n.getAttribute("coordcolumn"));return[Number(n.getAttribute("data")),t,e,n.classList.contains("vertical")?"vertical":"horizontal"]}function jn(n,t,e,r){var o=[],i=[],a=qn(n,"--square-size"),s=qn(n,"--board-gap");return function(n){var t=xn[n.id];xn[n.id].forEach((function(n){return n.classList.remove("behind")}));var e=kn[n.id];kn[n.id].forEach((function(t){t.classList.remove("block"),kn[n.id]={},Object.values(kn).forEach((function(n){Array.isArray(n)&&n.forEach((function(n){return n.classList.add("block")}))}))}))}(n),n.classList.contains("vertical")?(o=(o=Array.from(Bn.children).slice(t,t+r).map((function(n){return function(n,t){return Array.from(t.children).filter((function(t){return Number(t.getAttribute("data"))===n}))}(e,n)}))).flat(),i=new gn(t,e,r).getVertical()):(o=Array.from(Array.from(Bn.children)[t].children).slice(e,e+r),i=new gn(t,e,r).getHorizontal(),o.forEach((function(n){return n.classList.add("behind")}))),i.forEach((function(n){return n.classList.add("block")})),n.style.top="".concat((a+s)*t,"px"),n.style.left="".concat((a+s)*e,"px"),xn[n.id]=o,kn[n.id]=i,o}function In(n){var t=n.target.parentElement,e=yn(Ln(t),3),r=e[0],o=e[1],i=e[2];(!new mn(t,o,i,r,xn,kn).horizontal()&&t.classList.contains("vertical")||!new mn(t,o,i,r,xn,kn).vertical()&&!t.classList.contains("vertical"))&&(t.classList.toggle("vertical"),jn(t,o,i,r))}Cn.forEach((function(n){n.addEventListener("dragstart",(function(n){setTimeout((function(){n.target.classList.add("hide")}),0),n.dataTransfer.setData("text/plain",n.target.id)})),n.addEventListener("dragend",(function(n){setTimeout((function(){n.target.classList.remove("hide")}),0)})),n.addEventListener("click",Sn)})),Array.from(Bn.children).forEach((function(n){Array.from(n.children).forEach((function(t){var e=Number(n.getAttribute("data"));t.addEventListener("drop",(function(r){r.preventDefault();var o=r.dataTransfer.getData("text/plain"),i=document.getElementById(o),a=Number(i.getAttribute("data"));r.target.classList.remove("drag-over");var s=Number(t.getAttribute("data"));(!new mn(i,e,s,a,xn,kn).horizontal()&&!i.classList.contains("vertical")||!new mn(i,e,s,a,xn,kn).vertical()&&i.classList.contains("vertical"))&&(i.classList.add("dragged-in"),i.removeEventListener("click",Sn),i.addEventListener("click",In),i.setAttribute("coordcolumn",s),i.setAttribute("coordrow",n.getAttribute("data")),jn(i,e,s,a),Bn.appendChild(i))})),t.addEventListener("dragenter",(function(n){n.preventDefault(),n.target.classList.add("drag-over")})),t.addEventListener("dragover",(function(n){return n.preventDefault()})),t.addEventListener("dragleave",(function(n){n.preventDefault(),n.target.classList.remove("drag-over")}))}))})),wn.addEventListener("click",(function(){0===En.children.length&&(Cn.forEach((function(n){var t=yn(Ln(n),4),e=t[0],r=t[1],o=t[2],i=t[3],a=S(e);_.player1Board.placeShip(a,r,o,i)})),bn.classList.add("inactive"),document.querySelector("#game").classList.remove("inactive"),o().publish("game-started",_.player1Board))})),wn.addEventListener("mouseover",(function(){0!==En.children.length?wn.classList.add("not-yet"):wn.classList.add("ready")})),wn.addEventListener("mouseout",(function(){wn.classList.remove("not-yet"),wn.classList.remove("ready")}))},917:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,'/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n:root {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n',"",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;AACD;EACE,sBAAsB;AACxB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE,SAAS;EACT,UAAU;EACV,SAAS;EACT,eAAe;EACf,aAAa;EACb,wBAAwB;AAC1B;AACA,gDAAgD;AAChD;;;;;;;;;;;EAWE,cAAc;AAChB;AACA;EACE,cAAc;AAChB;AACA;;EAEE,gBAAgB;AAClB;AACA;;EAEE,YAAY;AACd;AACA;;;;EAIE,WAAW;EACX,aAAa;AACf;AACA;EACE,yBAAyB;EACzB,iBAAiB;AACnB",sourcesContent:['/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n:root {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol,\nul {\n  list-style: none;\n}\nblockquote,\nq {\n  quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n'],sourceRoot:""}]);const s=a},426:(n,t,e)=>{"use strict";e.d(t,{Z:()=>l});var r=e(537),o=e.n(r),i=e(645),a=e.n(i),s=e(917),c=a()(o());c.i(s.Z),c.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap);"]),c.push([n.id,':root {\n  --square-size: 43px;\n  --board-gap: 2px;\n  --board-size: calc(\n    calc(var(--square-size) * 10) + calc(var(--board-gap) * 10)\n  );\n  --color-target: blue;\n  --color-ship: rgb(136, 134, 134);\n  --color-ship-hit: rgb(232, 108, 108);\n  --color-ship-just-hit: rgb(173, 17, 17);\n  --color-water: rgb(157, 240, 237);\n  --color-hit: rgb(41, 125, 122);\n  --color-water-dark: rgb(37, 63, 75);\n  --color-background: #08082e;\n  --color-light: #f4f4f5;\n  --color-complementary-light: rgb(205, 226, 72);\n  --color-complementary-dark: rgb(60, 65, 32);\n  font-family: "Roboto", sans-serif;\n}\n\n/* * {\n  outline: dashed red;\n} */\nbody {\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  color: var(--color-light);\n}\n\n#game {\n  background-color: var(--color-background);\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-rows: 1fr 6fr 50px;\n  grid-template-areas: \n                        "header"\n                        "main"\n                        "footer";\n  align-items: center;\n  justify-items: center;\n}\n\n#game,\n#pop-up{\n    transition: left 2s;\n    transition: opacity 2s;\n}\n\n#pop-up.inactive,\n#game.inactive {\n  /* display: none; */\n  opacity: 0;\n  position: absolute;\n  left: -100%;\n  transition: all 2s;\n}\n\nh1,\nh3 {\n  font-size: 1.5rem;\n}\n\nheader {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-self: end;\n  position: relative;\n  grid-area: header;\n  width: 100%;\n  min-height: 80px;\n}\n\nheader h1 {\n  color: var(--color-complementary-light);\n  font-size: 3rem;\n  letter-spacing: 0.2rem;\n}\n\nh1.win{\n    color: rgb(100, 238, 100)\n}\n\nh1.loose{\n    color: rgb(238, 100, 100)\n}\n\n\n\nheader > button {\n  position: absolute;\n  bottom: -30px;\n  right: min(1vw, 80px);\n}\n\nheader > div > h1.typing {\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\n  border-right: 0.15em solid var(--color-complementary-light); /* The typwriter cursor */\n  white-space: nowrap; /* Keeps the content on a single line */\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n  letter-spacing: 0.15em; /* Adjust as needed */\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\n}\n\nmain {\n  width: 100%;\n  display: grid;\n  grid-template-rows: 50px 1fr;\n  grid-template-columns: repeat(2, 1fr);\n  justify-items: center;\n  gap: auto;\n  align-items: center;\n  grid-area: main;\n}\n\nmain > h1 {\n  color: var(--color-light);\n  grid-row: 1 / 2;\n}\n\n.board {\n  width: var(--board-size);\n  height: var(--board-size);\n  background-color: var(--color-background);\n  display: flex;\n  flex-direction: column;\n  grid-template-rows: repeat(10, 1fr);\n  gap: var(--board-gap);\n}\n\n.row {\n  display: flex;\n  height: auto;\n  gap: var(--board-gap);\n  position: relative;\n}\n\n.square {\n  background-color: var(--color-water);\n  width: var(--square-size);\n  height: var(--square-size);\n}\n\n.square.enemy {\n  background-color: #52525b;\n}\n\n.square.enemy:hover {\n  cursor: crosshair;\n}\n\n.square.enemy.hit {\n  pointer-events: none;\n}\n\n.ship-square:not(.enemy:not(.hit)) {\n  --border-size: 6px;\n  --border-color: rgb(61, 55, 55);\n  background-color: var(--color-ship);\n  width: calc(var(--square-size) - calc(var(--border-size) * 2));\n  height: calc(var(--square-size) - calc(var(--border-size) * 2));\n  border: var(--border-color) solid var(--border-size);\n}\n\n.square.ship-square.hit {\n  background-color: var(--color-ship-hit);\n}\n\n.square.ship-square.hit.just-hit {\n  background-color: var(--color-ship-just-hit);\n}\n\n.square.hit {\n  transition: background-color 0.5s;\n  background-color: var(--color-hit);\n  position: relative;\n}\n\n.square.block {\n  opacity: 0.7;\n}\n\n.square.hit:not(.ship-square)::before {\n  text-align: center;\n  content: ".";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -70%);\n}\n\n.square.hit.just-hit {\n  outline: solid yellow 1px;\n}\n\n.square.enemy:hover {\n  background-color: var(--color-target);\n}\n\nfooter {\n  grid-area: footer;\n  margin-top: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 100%;\n  gap: 2vw;\n  background-color: var(--color-background);\n  color: white;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,\n    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1.5rem;\n}\n\n#github-logo {\n  height: 30px;\n}\n\n#pop-up {\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--color-background);\n  display: grid;\n  justify-items: center;\n  align-items: start;\n  gap: 10px;\n  grid-template-rows: 1fr 2fr 1fr 50px;\n  grid-template-columns: 1fr 1fr;\n  grid-template-areas:\n    "title title"\n    "board ships"\n    "button button"\n    "footer footer";\n}\n\n#pop-up article {\n  grid-area: title;\n  align-self: center;\n}\n\n#pop-up .board {\n  grid-area: board;\n  justify-self: end;\n}\n\n#pop-up article {\n  background: linear-gradient(\n    to bottom,\n    rgb(135, 135, 236),\n    var(--color-water)\n  );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  text-align: center;\n}\n\nbutton {\n  background-color: var(--color-complementary-light);\n  border-radius: 0.8rem;\n  box-shadow: 5px 5px var(--color-complementary-dark);\n  padding: 10px 16px 10px 16px;\n  border: none;\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--color-water-dark);\n  position: relative;\n}\n\nbutton:hover {\n  background-color: var(--color-complementary-light);\n  cursor: pointer;\n}\n\nbutton:active {\n  position: relative;\n  left: 3px;\n  top: 2px;\n  box-shadow: 2px 2px 1px black;\n}\n\nbutton.not-yet {\n  box-shadow: 0px 0px 2px 2px red;\n}\n\nbutton.not-yet::after {\n  content: "Place all your ships first";\n  color: red;\n  font-size: 1rem;\n  position: absolute;\n  bottom: -100%;\n  right: 0%;\n}\n\n#title {\n  font-size: 3rem;\n  font-weight: bold;\n  letter-spacing: 0.3rem;\n  padding: 20px;\n}\n\n#ships-wrapper {\n  grid-area: ships;\n  justify-self: start;\n  position: relative;\n  align-items: flex-start;\n}\n\n#ships {\n  display: flex;\n  justify-items: flex-start;\n  gap: 20px;\n  flex-wrap: wrap;\n  position: relative;\n  min-height: calc(var(--board-size) / 2);\n  max-height: var(--board-size);\n  max-width: var(--board-size);\n  padding: 20px;\n  align-items: flex-start;\n  position: relative;\n}\n\n#ships-instructions {\n  display: flex;\n  flex-direction: column;\n  padding: 0px 20px;\n  gap: 20px;\n}\n\n#pop-up button {\n  grid-area: button;\n  align-self: center;\n}\n\n#ships .ship.hide {\n  opacity: 0.3;\n  display: none;\n}\n\n.ship {\n  display: flex;\n  gap: var(--board-gap);\n  background-color: grey;\n  min-height: var(--square-size);\n}\n\n.ship.vertical {\n  flex-direction: column;\n}\n\n#pop-up .board {\n  max-height: var(--board-size);\n  position: relative;\n}\n\n#pop-up .board .ship {\n  position: absolute;\n}\n\n.square.drag-over {\n  background-color: yellow;\n}\n\n.square.behind {\n  background-color: green;\n}\n\n@media only screen and (max-width: 950px) {\n  main {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-evenly;\n    gap: 30px;\n    padding-top: 20px;\n  }\n\n  header {\n    align-self: center;\n    width: 100%;\n  }\n\n  #game {\n    background-color: var(--color-background);\n    height: auto;\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #pop-up {\n    height: auto;\n    background-color: var(--color-background);\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n    gap: 20px;\n    min-height: 100%;\n  }\n\n  #ships {\n    height: 50%;\n  }\n}\n\n@keyframes wave {\n  0% {\n    transform: translate(-50%, -75%) rotate(0deg);\n  }\n\n  100% {\n    transform: translate(-50%, -75%) rotate(360deg);\n  }\n}\n\nbutton.ready:hover {\n  background-image: linear-gradient(\n    to right,\n    var(--color-complementary-light) 0%,\n    var(--color-water) 50%,\n    var(--color-complementary-light) 100%\n  );\n  animation: slidebg 2s linear infinite;\n}\n\n@keyframes slidebg {\n  to {\n    background-position: 18vw;\n  }\n}\n\n/* The typing effect */\n@keyframes typing {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n/* The typewriter cursor effect */\n@keyframes blink-caret {\n  from,\n  to {\n    border-color: transparent;\n  }\n  50% {\n    border-color: var(--color-complementary-light);\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@import "./reset.css";\n\n@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap");\n\n:root {\n  --square-size: 43px;\n  --board-gap: 2px;\n  --board-size: calc(\n    calc(var(--square-size) * 10) + calc(var(--board-gap) * 10)\n  );\n  --color-target: blue;\n  --color-ship: rgb(136, 134, 134);\n  --color-ship-hit: rgb(232, 108, 108);\n  --color-ship-just-hit: rgb(173, 17, 17);\n  --color-water: rgb(157, 240, 237);\n  --color-hit: rgb(41, 125, 122);\n  --color-water-dark: rgb(37, 63, 75);\n  --color-background: #08082e;\n  --color-light: #f4f4f5;\n  --color-complementary-light: rgb(205, 226, 72);\n  --color-complementary-dark: rgb(60, 65, 32);\n  font-family: "Roboto", sans-serif;\n}\n\n/* * {\n  outline: dashed red;\n} */\nbody {\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  color: var(--color-light);\n}\n\n#game {\n  background-color: var(--color-background);\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-rows: 1fr 6fr 50px;\n  grid-template-areas: \n                        "header"\n                        "main"\n                        "footer";\n  align-items: center;\n  justify-items: center;\n}\n\n#game,\n#pop-up{\n    transition: left 2s;\n    transition: opacity 2s;\n}\n\n#pop-up.inactive,\n#game.inactive {\n  /* display: none; */\n  opacity: 0;\n  position: absolute;\n  left: -100%;\n  transition: all 2s;\n}\n\nh1,\nh3 {\n  font-size: 1.5rem;\n}\n\nheader {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-self: end;\n  position: relative;\n  grid-area: header;\n  width: 100%;\n  min-height: 80px;\n}\n\nheader h1 {\n  color: var(--color-complementary-light);\n  font-size: 3rem;\n  letter-spacing: 0.2rem;\n}\n\nh1.win{\n    color: rgb(100, 238, 100)\n}\n\nh1.loose{\n    color: rgb(238, 100, 100)\n}\n\n\n\nheader > button {\n  position: absolute;\n  bottom: -30px;\n  right: min(1vw, 80px);\n}\n\nheader > div > h1.typing {\n  overflow: hidden; /* Ensures the content is not revealed until the animation */\n  border-right: 0.15em solid var(--color-complementary-light); /* The typwriter cursor */\n  white-space: nowrap; /* Keeps the content on a single line */\n  margin: 0 auto; /* Gives that scrolling effect as the typing happens */\n  letter-spacing: 0.15em; /* Adjust as needed */\n  animation: typing 1s steps(40, end), blink-caret 0.75s step-end infinite;\n}\n\nmain {\n  width: 100%;\n  display: grid;\n  grid-template-rows: 50px 1fr;\n  grid-template-columns: repeat(2, 1fr);\n  justify-items: center;\n  gap: auto;\n  align-items: center;\n  grid-area: main;\n}\n\nmain > h1 {\n  color: var(--color-light);\n  grid-row: 1 / 2;\n}\n\n.board {\n  width: var(--board-size);\n  height: var(--board-size);\n  background-color: var(--color-background);\n  display: flex;\n  flex-direction: column;\n  grid-template-rows: repeat(10, 1fr);\n  gap: var(--board-gap);\n}\n\n.row {\n  display: flex;\n  height: auto;\n  gap: var(--board-gap);\n  position: relative;\n}\n\n.square {\n  background-color: var(--color-water);\n  width: var(--square-size);\n  height: var(--square-size);\n}\n\n.square.enemy {\n  background-color: #52525b;\n}\n\n.square.enemy:hover {\n  cursor: crosshair;\n}\n\n.square.enemy.hit {\n  pointer-events: none;\n}\n\n.ship-square:not(.enemy:not(.hit)) {\n  --border-size: 6px;\n  --border-color: rgb(61, 55, 55);\n  background-color: var(--color-ship);\n  width: calc(var(--square-size) - calc(var(--border-size) * 2));\n  height: calc(var(--square-size) - calc(var(--border-size) * 2));\n  border: var(--border-color) solid var(--border-size);\n}\n\n.square.ship-square.hit {\n  background-color: var(--color-ship-hit);\n}\n\n.square.ship-square.hit.just-hit {\n  background-color: var(--color-ship-just-hit);\n}\n\n.square.hit {\n  transition: background-color 0.5s;\n  background-color: var(--color-hit);\n  position: relative;\n}\n\n.square.block {\n  opacity: 0.7;\n}\n\n.square.hit:not(.ship-square)::before {\n  text-align: center;\n  content: ".";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -70%);\n}\n\n.square.hit.just-hit {\n  outline: solid yellow 1px;\n}\n\n.square.enemy:hover {\n  background-color: var(--color-target);\n}\n\nfooter {\n  grid-area: footer;\n  margin-top: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 100%;\n  gap: 2vw;\n  background-color: var(--color-background);\n  color: white;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,\n    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1.5rem;\n}\n\n#github-logo {\n  height: 30px;\n}\n\n#pop-up {\n  width: 100vw;\n  height: 100vh;\n  background-color: var(--color-background);\n  display: grid;\n  justify-items: center;\n  align-items: start;\n  gap: 10px;\n  grid-template-rows: 1fr 2fr 1fr 50px;\n  grid-template-columns: 1fr 1fr;\n  grid-template-areas:\n    "title title"\n    "board ships"\n    "button button"\n    "footer footer";\n}\n\n#pop-up article {\n  grid-area: title;\n  align-self: center;\n}\n\n#pop-up .board {\n  grid-area: board;\n  justify-self: end;\n}\n\n#pop-up article {\n  background: linear-gradient(\n    to bottom,\n    rgb(135, 135, 236),\n    var(--color-water)\n  );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  text-align: center;\n}\n\nbutton {\n  background-color: var(--color-complementary-light);\n  border-radius: 0.8rem;\n  box-shadow: 5px 5px var(--color-complementary-dark);\n  padding: 10px 16px 10px 16px;\n  border: none;\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--color-water-dark);\n  position: relative;\n}\n\nbutton:hover {\n  background-color: var(--color-complementary-light);\n  cursor: pointer;\n}\n\nbutton:active {\n  position: relative;\n  left: 3px;\n  top: 2px;\n  box-shadow: 2px 2px 1px black;\n}\n\nbutton.not-yet {\n  box-shadow: 0px 0px 2px 2px red;\n}\n\nbutton.not-yet::after {\n  content: "Place all your ships first";\n  color: red;\n  font-size: 1rem;\n  position: absolute;\n  bottom: -100%;\n  right: 0%;\n}\n\n#title {\n  font-size: 3rem;\n  font-weight: bold;\n  letter-spacing: 0.3rem;\n  padding: 20px;\n}\n\n#ships-wrapper {\n  grid-area: ships;\n  justify-self: start;\n  position: relative;\n  align-items: flex-start;\n}\n\n#ships {\n  display: flex;\n  justify-items: flex-start;\n  gap: 20px;\n  flex-wrap: wrap;\n  position: relative;\n  min-height: calc(var(--board-size) / 2);\n  max-height: var(--board-size);\n  max-width: var(--board-size);\n  padding: 20px;\n  align-items: flex-start;\n  position: relative;\n}\n\n#ships-instructions {\n  display: flex;\n  flex-direction: column;\n  padding: 0px 20px;\n  gap: 20px;\n}\n\n#pop-up button {\n  grid-area: button;\n  align-self: center;\n}\n\n#ships .ship.hide {\n  opacity: 0.3;\n  display: none;\n}\n\n.ship {\n  display: flex;\n  gap: var(--board-gap);\n  background-color: grey;\n  min-height: var(--square-size);\n}\n\n.ship.vertical {\n  flex-direction: column;\n}\n\n#pop-up .board {\n  max-height: var(--board-size);\n  position: relative;\n}\n\n#pop-up .board .ship {\n  position: absolute;\n}\n\n.square.drag-over {\n  background-color: yellow;\n}\n\n.square.behind {\n  background-color: green;\n}\n\n@media only screen and (max-width: 950px) {\n  main {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: space-evenly;\n    gap: 30px;\n    padding-top: 20px;\n  }\n\n  header {\n    align-self: center;\n    width: 100%;\n  }\n\n  #game {\n    background-color: var(--color-background);\n    height: auto;\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #pop-up {\n    height: auto;\n    background-color: var(--color-background);\n    display: flex;\n    flex-direction: column;\n    justify-items: center;\n    align-items: center;\n    gap: 20px;\n    min-height: 100%;\n  }\n\n  #ships {\n    height: 50%;\n  }\n}\n\n@keyframes wave {\n  0% {\n    transform: translate(-50%, -75%) rotate(0deg);\n  }\n\n  100% {\n    transform: translate(-50%, -75%) rotate(360deg);\n  }\n}\n\nbutton.ready:hover {\n  background-image: linear-gradient(\n    to right,\n    var(--color-complementary-light) 0%,\n    var(--color-water) 50%,\n    var(--color-complementary-light) 100%\n  );\n  animation: slidebg 2s linear infinite;\n}\n\n@keyframes slidebg {\n  to {\n    background-position: 18vw;\n  }\n}\n\n/* The typing effect */\n@keyframes typing {\n  from {\n    width: 0;\n  }\n  to {\n    width: 100%;\n  }\n}\n\n/* The typewriter cursor effect */\n@keyframes blink-caret {\n  from,\n  to {\n    border-color: transparent;\n  }\n  50% {\n    border-color: var(--color-complementary-light);\n  }\n}\n'],sourceRoot:""}]);const l=c},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},798:function(n,t,e){n=e.nmd(n),function(e,r){"use strict";var o={};e.PubSub?(o=e.PubSub,console.warn("PubSub already loaded, using existing version")):(e.PubSub=o,function(n){var t={},e=-1;function r(n,t,e){try{n(t,e)}catch(n){setTimeout(function(n){return function(){throw n}}(n),0)}}function o(n,t,e){n(t,e)}function i(n,e,i,a){var s,c=t[e],l=a?o:r;if(Object.prototype.hasOwnProperty.call(t,e))for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&l(c[s],n,i)}function a(n){var e=String(n);return Boolean(Object.prototype.hasOwnProperty.call(t,e)&&function(n){var t;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t))return!0;return!1}(t[e]))}function s(n,t,e,r){var o=function(n,t,e){return function(){var r=String(n),o=r.lastIndexOf(".");for(i(n,n,t,e);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),i(n,r,t,e);i(n,"*",t,e)}}(n="symbol"==typeof n?n.toString():n,t,r);return!!function(n){for(var t=String(n),e=a(t)||a("*"),r=t.lastIndexOf(".");!e&&-1!==r;)r=(t=t.substr(0,r)).lastIndexOf("."),e=a(t);return e}(n)&&(!0===e?o():setTimeout(o,0),!0)}n.publish=function(t,e){return s(t,e,!1,n.immediateExceptions)},n.publishSync=function(t,e){return s(t,e,!0,n.immediateExceptions)},n.subscribe=function(n,r){if("function"!=typeof r)return!1;n="symbol"==typeof n?n.toString():n,Object.prototype.hasOwnProperty.call(t,n)||(t[n]={});var o="uid_"+String(++e);return t[n][o]=r,o},n.subscribeAll=function(t){return n.subscribe("*",t)},n.subscribeOnce=function(t,e){var r=n.subscribe(t,(function(){n.unsubscribe(r),e.apply(this,arguments)}));return n},n.clearAllSubscriptions=function(){t={}},n.clearSubscriptions=function(n){var e;for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&0===e.indexOf(n)&&delete t[e]},n.countSubscriptions=function(n){var e,r,o=0;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&0===e.indexOf(n)){for(r in t[e])o++;break}return o},n.getSubscriptions=function(n){var e,r=[];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&0===e.indexOf(n)&&r.push(e);return r},n.unsubscribe=function(e){var r,o,i,a="string"==typeof e&&(Object.prototype.hasOwnProperty.call(t,e)||function(n){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&0===e.indexOf(n))return!0;return!1}(e)),s=!a&&"string"==typeof e,c="function"==typeof e,l=!1;if(!a){for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)){if(o=t[r],s&&o[e]){delete o[e],l=e;break}if(c)for(i in o)Object.prototype.hasOwnProperty.call(o,i)&&o[i]===e&&(delete o[i],l=!0)}return l}n.clearSubscriptions(e)}}(o)),void 0!==n&&n.exports&&(t=n.exports=o),t.PubSub=o,n.exports=t=o}("object"==typeof window&&window||this)},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],u=i[l]||0,A="".concat(l," ").concat(u);i[l]=u+1;var d=e(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:h,references:1})}a.push(A)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var c=r(n,o),l=0;l<i.length;l++){var u=e(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=c}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=97)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,